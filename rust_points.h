/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_TEST_SAFER_FFI__
#define __RUST_TEST_SAFER_FFI__

#ifdef __cplusplus
extern "C" {
#endif

typedef struct Point {

    double x;

    double y;

} Point_t;

/** \brief
 *  Returns the middle point of `[a, b]`.
 */
Point_t mid_point (
    Point_t const * a,
    Point_t const * b);

/** \brief
 *  Pretty-prints a point using Rust's formatting logic.
 */
void print_point (
    Point_t const * point);

char * print (
    char const * msg);

void drop_str (
    char * msg);

char const * get_str (void);


#include <stddef.h>
#include <stdint.h>

typedef struct RefDynFnMut0_int32 {

    void * env_ptr;

    int32_t (*call)(void *);

} RefDynFnMut0_int32_t;

typedef struct BoxDynFnMut1_int32_int32 {

    void * env_ptr;

    int32_t (*call)(void *, int32_t);

    void (*free)(void *);

} BoxDynFnMut1_int32_int32_t;

BoxDynFnMut1_int32_int32_t call_closures (
    RefDynFnMut0_int32_t p);

int32_t call_fun_ptr (
    int32_t (*p)(int32_t, int32_t));

typedef struct ComplicatedStruct ComplicatedStruct_t;

ComplicatedStruct_t * create (void);

int32_t call_and_get_x (
    ComplicatedStruct_t const * it);

void destroy (
    ComplicatedStruct_t * it);

/** \brief
 *  `&'lt [T]` but with a guaranteed `#[repr(C)]` layout.
 * 
 *  # C layout (for some given type T)
 * 
 *  ```c
 *  typedef struct {
 *      // Cannot be NULL
 *      T * ptr;
 *      size_t len;
 *  } slice_T;
 *  ```
 * 
 *  # Nullable pointer?
 * 
 *  If you want to support the above typedef, but where the `ptr` field is
 *  allowed to be `NULL` (with the contents of `len` then being undefined)
 *  use the `Option< slice_ptr<_> >` type.
 */
typedef struct slice_ref_uint8 {

    uint8_t const * ptr;

    size_t len;

} slice_ref_uint8_t;

uint8_t max (
    slice_ref_uint8_t xs);

int32_t * new_int (
    int32_t x);

void free_int (
    int32_t * x);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_TEST_SAFER_FFI__ */
